// <auto-generated />
using System;
using LightningPT.EntityFrameworkCore.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LightningPT.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(LightningPTDbContext))]
    partial class LightningPTDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("LightningPT.Core.Entities.PtBitTorrent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CateGory");

                    b.Property<long>("DownLoadCount");

                    b.Property<string>("InfoHash");

                    b.Property<bool>("IsAnonymous");

                    b.Property<long>("Size");

                    b.Property<DateTime>("UploadTime");

                    b.Property<long>("Uploader");

                    b.HasKey("Id");

                    b.ToTable("PtBitTorrents");
                });

            modelBuilder.Entity("LightningPT.Core.Entities.PtBitTorrentCateGory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<string>("IconUrl");

                    b.HasKey("Id");

                    b.ToTable("PtBitTorrentCateGories");
                });

            modelBuilder.Entity("LightningPT.Core.Entities.PtUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BannedTime");

                    b.Property<string>("DisplayName");

                    b.Property<bool>("IsBanned");

                    b.Property<DateTime?>("LasLoginDateTime");

                    b.Property<string>("LastLoginIp");

                    b.Property<int>("Level");

                    b.Property<long>("MagicValue");

                    b.Property<string>("PassKey");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("PtUsers");
                });

            modelBuilder.Entity("LightningPT.Core.Entities.PtUserLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50);

                    b.Property<string>("IconUrl")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("PtUserLevels");
                });

            modelBuilder.Entity("LightningPT.Core.Entities.PtUserStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DownloadTotalCount");

                    b.Property<double>("SharingRate");

                    b.Property<long>("UploadTotalCount");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("PtUserStatisticses");
                });
#pragma warning restore 612, 618
        }
    }
}
